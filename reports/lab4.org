#+title: Lab2
#+PROPERTY: header-args:python   :session :exports both :eval no-export :async
* Lab 4: Chomsky normal form
- Course :: Formal Languages & Finite Automata
- Author :: Balan Artiom

* Theory
The [[https://en.wikipedia.org/wiki/Chomsky_normal_form#DEL:_Eliminate_%CE%B5-rules][wikipedia page]] pretty much sums it up.
I can add one thing perhaps,
which is that the =DEL= procedure doesn't seem to handle non-terminals which only have ε-rules.
For that, I checked for such non-terminals, which I called /null/ (as opposed to /nullable/),
and completely removed them from every rule.

I really wonder what was the motivation of making this the objective of the laboratory work.
Why not something more fun and practical?
This CNF thing was pretty difficult, painfully boring,
and its only use seems to be in some specific parsing algorithm (called CYK, if that matters).
* Objectives
- [X] Implement a method to convert a CFG to its normal form
- [X] Write unit tests
* Results
#+begin_src python :exports none
from angryowl.grammar import *
#+end_src

#+RESULTS:

Here's the grammar from variant #3,
#+begin_src python :results drawer
g1 = Grammar(VN = {'S', 'A', 'B', 'C', 'E'},
        VT = {'d', 'a'},
        S = 'S',
        P = {
            ('S',): {('A',)},
            ('A',): {('d',), ('d', 'S'), ('a', 'A', 'd', 'A', 'B')},
            ('B',): {('a', 'C'), ('a', 'S'), ('A', 'C')},
            ('C',): {()},
            ('E',): {('A', 'S')}})

# mathjax needs doubled backslashes
"$$" + g1.to_latex().replace('\\', '\\\\') + '$$'
#+end_src

#+RESULTS:
:results:
$$\\begin{alignat*}{1}V_N &= \\{E,S,A,B,C\\} \\\\ V_T &= \\{a,d\\} \\\\ S &= \\{S\\} \\\\ P &= \\{ \\\\&S → A, \\\\ &A → d | d S | a A d A B, \\\\ &B → a S | A C | a C, \\\\ &C → ε, \\\\ &E → A S\\} \\\\ \\end{alignat*}$$
:end:

#+begin_src latex :exports none :file 1.png
$$\begin{alignat*}{1}V_N &= \{E,S,A,B,C\} \\ V_T &= \{a,d\} \\ S &= \{S\} \\ P &= \{ \\&S → A, \\ &A → d | d S | a A d A B, \\ &B → a S | A C | a C, \\ &C → ε, \\ &E → A S\} \\ \end{alignat*}$$
#+end_src

[[./1.png]]

And here's its Chomsky normal form, achieved using the method I implemented:
#+begin_src python :results drawer :exports code
g1_normal = g1.to_normal_form()

"$$" + g1_normal.to_latex().replace('\\', '\\\\') + '$$'
#+end_src

#+RESULTS:
:results:
/tmp/babel-k1zaoT/python-ZnF3mm
:end:

#+begin_src latex :exports none :file test.png
$$\begin{alignat*}{1}V_N &= \{E,a0,A0,d0,A2,S,A,B,S0,C,A1\} \\ V_T &= \{a,d\} \\ S &= \{S0\} \\ P &= \{ \\&S → d | a0 A0 | d0 S, \\ &A → d | a0 A0 | d0 S, \\ &B → a0 S | a0 A0 | d0 S | a | d, \\ &E → A S, \\ &S0 → d | a0 A0 | d0 S, \\ &a0 → a, \\ &d0 → d, \\ &A0 → A A1, \\ &A1 → d0 A2, \\ &A2 → A B\} \\ \end{alignat*}$$
#+end_src

[[./test.png]]


That's pretty much it.

This method works with any context-free grammar
(as long as it doesn't have loops in the production rules I think).

I also implemented a =Grammar.is_in_normal_form= method to check if the conversion worked,
but turned out I should also somehow check if the converted grammar is equivalent to the original,
which I didn't, and only discovered this when testing the code manually.

Here's a capture of my terminal after running all the tests:
#+begin_example
╰─$ coverage run -m pytest
========================================================= test session starts ==========================================================
platform linux -- Python 3.10.10, pytest-7.2.0, pluggy-1.0.0
rootdir: /home/shunlog/my_projects/angryowl
plugins: anyio-3.6.2
collected 55 items

tests/test_all.py .......................................................                                                        [100%]

========================================================== 55 passed in 0.55s ==========================================================

╰─$ coverage report
Name                       Stmts   Miss  Cover
----------------------------------------------
src/angryowl/__init__.py       0      0   100%
src/angryowl/automata.py      74      2    97%
src/angryowl/grammar.py      226     20    91%
tests/__init__.py              0      0   100%
tests/test_all.py             83      0   100%
----------------------------------------------
TOTAL                        383     22    94%
#+end_example
* Implementation
For this laboratory work, I tried using the glorified [[https://en.wikipedia.org/wiki/Test-driven_development][test-driven development]] approach.
It actually was really useful.
Not only did it help me make sure I understand what I have to do before I jumped right in writing my spaghetti code,
it also allowed fragment the work into tinier functions that I could test separately.

The algorithm for converting a CFG to its Chomsky Normal Form is described on Wikipedia.
Basically, the algorithm can be split into 5 steps:
1. =START=: Eliminate the start symbol from right-hand sides
2. =TERM=: Eliminate rules with nonsolitary terminals
3. =BIN=: Eliminate right-hand sides with more than 2 nonterminals
4. =DEL=: Eliminate ε-rules
5. =UNIT=: Eliminate unit rules

For each such step, I wrote tests and then implemented it as a protected class method.

For example, here's the =START= procedure.
All it does is add a new rule $S_0 → S$ and set $S_0$ as the start symbol.
#+begin_src python
def _START(self):
    s = self._new_nonterminal(self.S)
    self.P[(s,)] = {(self.S,)}
    self.S = s
    self.VN |= {s}

#+end_src

And here's the tests for it:
#+begin_src python
@pytest.mark.parametrize("g_in, g_out", [
    (
        Grammar(VN = {'S', 'S0'},
                VT = {},
                S = 'S',
                P = {}),
        Grammar(VN = {'S', 'S0', 'S1'},
                VT = {},
                S = 'S1',
                P = {('S1',): {('S',)}}),
    )
])
def test_procedure_START(self, g_in, g_out):
    g_in._START()
    assert g_in == g_out
#+end_src

** TERM
#+begin_quote
To eliminate each rule

    A → X1 ... a ... Xn

with a terminal symbol a being not the only symbol on the right-hand side, introduce, for every such terminal, a new nonterminal symbol Na, and a new rule

    Na → a.

Change every rule

    A → X1 ... a ... Xn

to

    A → X1 ... Na ... Xn.

If several terminal symbols occur on the right-hand side, simultaneously replace each of them by its associated nonterminal symbol.
#+end_quote

#+begin_src python
def _TERM(self):
    # find all non-solitary terminals
    terminals = set()
    for left, right in self.production_rules():
        if len(right) <= 1:
            continue
        for s in right:
            if s in self.VT:
                terminals.add(s)

    # create new non-terminals for every such terminal
    mapping = dict()
    for s in terminals:
        ns = self._new_nonterminal(s)
        self.VN.add(ns)
        self.P[(ns,)] = {(s,)}
        mapping[s] = ns

    # replace all terminals with non-terminals
    P2 = self.P.copy()
    for left, right in self.production_rules():
        if len(right) <= 1:
            continue
        r2 = ()
        for s in right:
            if s in self.VT:
                s = mapping[s]
            r2 += s,
        P2[left].remove(right)
        P2[left].add(r2)

    self.P = P2
#+end_src

** BIN
#+begin_quote
Replace each rule

    A → X1 X2 ... Xn

with more than 2 nonterminals X1,...,Xn by rules

    A → X1 A1,
    A1 → X2 A2,
    ... ,
    An-2 → Xn-1 Xn,

where Ai are new nonterminal symbols. Again, this does not change the grammar's produced language.
#+end_quote

#+begin_src python
def _BIN(self):
    P2 = self.P.copy()
    for left, right in self.production_rules():
        # elliminate rules with more than 2 terminals on the right
        if len(right) <= 2:
            continue

        assert all(s in self.VN for s in right)

        # split the current rule
        prev_sym = left[0]
        P2[left].remove(right)
        for s in right[:-2]:
            ns = self._new_nonterminal(left[0])
            self.VN.add(ns)
            P2[(prev_sym,)].add((s, ns))
            P2[(ns,)] = set()
            prev_sym = ns
        P2[(prev_sym,)] = {(right[-2], right[-1])}

    self.P = P2
#+end_src

** DEL
#+begin_quote
An ε-rule is a rule of the form

    A → ε,

where A is not S0, the grammar's start symbol.

To eliminate all rules of this form, first determine the set of all nonterminals that derive ε. Hopcroft and Ullman (1979) call such nonterminals nullable, and compute them as follows:

    If a rule A → ε exists, then A is nullable.
    If a rule A → X1 ... Xn exists, and every single Xi is nullable, then A is nullable, too.

Obtain an intermediate grammar by replacing each rule

    A → X1 ... Xn

by all versions with some nullable Xi omitted. By deleting in this grammar each ε-rule, unless its left-hand side is the start symbol, the transformed grammar is obtained.
#+end_quote
#+begin_src python
def _DEL(self):
    def combinations(sl):
        '''Given a tuple of symbols "sl",
        returns an equivalent set of rules with inlined nullables and removed nulls'''
        if len(sl) == 0:
            return {()}
        s = sl[0]
        rest = sl[1:]
        cs = combinations(rest)
        if self._is_null(s):
            return cs

        aug = {(s,) + t for t in cs}

        if s in self.VT or not self._is_nullable(s):
            return aug
        if self._is_nullable(s):
            return cs | aug

        assert False

    P2 = defaultdict(set)
    for left, right in self.production_rules():
        if len(right) == 0:
            if left[0] == self.S:
                P2[left].add(right)
            continue
        cs = combinations(right)
        for rule in cs:
            if len(rule) == 0:
                continue
            P2[left].add(rule)
    self.P = dict(P2)
#+end_src

** UNIT
#+begin_quote
A unit rule is a rule of the form

    A → B,

where A, B are nonterminal symbols. To remove it, for each rule

    B → X1 ... Xn,

where X1 ... Xn is a string of nonterminals and terminals, add rule

    A → X1 ... Xn

unless this is a unit rule which has already been (or is being) removed.
#+end_quote

#+begin_src python
def _UNIT(self):
    def replace():
        replaced = False
        P2 = defaultdict(set)

        for left, right in self.production_rules():
            if len(right) == 1 and right[0] in self.VN:
                replaced = True
                P2[left] |= self.P[right]
                continue
            P2[left].add(right)

        self.P = dict(P2)
        return replaced

    while True:
        if not replace():
            break
#+end_src

** Documentation
You can find the full source code in [[https://github.com/shunlog/angryowl][this repository]].
The new code starts at [[https://github.com/shunlog/angryowl/blob/master/src/angryowl/grammar.py#L206][this line]] and goes until the end of the file.
The tests [[https://github.com/shunlog/angryowl/blob/master/tests/test_all.py#L143][start here]].

The auto-generated documentation for the library resides [[https://angryowl.readthedocs.io/en/latest/][here]].
The relevant part is the description of the method [[https://angryowl.readthedocs.io/en/latest/api.html#angryowl.grammar.Grammar.to_normal_form][Grammar.to_normal_form()]].

Here's the relevant parts of the documentation, for the record:
#+begin_export html

<section id="grammar">
<h2>Grammar<a class="headerlink" href="#grammar" title="Permalink to this heading">¶</a></h2>
<dl class="py class">
<dt class="sig sig-object py" id="angryowl.grammar.Grammar">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">angryowl.grammar.</span></span><span class="sig-name descname"><span class="pre">Grammar</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">VN</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">VT</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">P</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">S</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#angryowl.grammar.Grammar" title="Permalink to this definition">¶</a></dt>
<dd><p>A <a class="reference external" href="https://en.wikipedia.org/wiki/Formal_grammar#Formal_definition">formal grammar</a> is defined by 4 components:</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>VN</strong> (<a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#set" title="(in Python v3.11)"><em>set</em></a><em>[</em><em>Hashable</em><em>]</em>) – set of nonterminals</p></li>
<li><p><strong>VT</strong> (<a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#set" title="(in Python v3.11)"><em>set</em></a><em>[</em><em>Hashable</em><em>]</em>) – set of terminals</p></li>
<li><p><strong>P</strong> (<a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict" title="(in Python v3.11)"><em>dict</em></a><em>[</em><em>SymbolsStr</em><em>, </em><a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#set" title="(in Python v3.11)"><em>set</em></a><em>[</em><em>SymbolsStr</em><em>]</em><em>]</em>) – list of productions</p></li>
<li><p><strong>S</strong> (<em>Hashable</em>) – starting state</p></li>
</ul>
</dd>
</dl>
<p>The list of productions is represented by a dictionary,
each rule being a mapping of a string of symbols onto another string of symbols.</p>
<p>For example, the following formal grammar:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">A</span> <span class="o">-&gt;</span> <span class="n">aA</span>
<span class="n">A</span> <span class="o">-&gt;</span> <span class="n">aB</span>
<span class="n">A</span> <span class="o">-&gt;</span> <span class="n">ε</span>
<span class="n">B</span> <span class="o">-&gt;</span> <span class="n">b</span>
</pre></div>
</div>
<p>Is represented in this way:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">Grammar</span><span class="p">(</span><span class="n">VN</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">},</span>
        <span class="n">VT</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">},</span>
        <span class="n">P</span> <span class="o">=</span> <span class="p">{</span>
            <span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="p">,):</span> <span class="p">{(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">),</span> <span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;A&quot;</span><span class="p">),</span> <span class="p">()},</span>
            <span class="p">(</span><span class="s2">&quot;B&quot;</span><span class="p">,):</span> <span class="p">{(</span><span class="s2">&quot;b&quot;</span><span class="p">,)}</span>
        <span class="p">},</span>
        <span class="n">S</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span><span class="p">)</span>
</pre></div>
</div>
<dl class="py attribute">
<dt class="sig sig-object py" id="angryowl.grammar.Grammar.SymbolsStr">
<span class="sig-name descname"><span class="pre">SymbolsStr</span></span><a class="headerlink" href="#angryowl.grammar.Grammar.SymbolsStr" title="Permalink to this definition">¶</a></dt>
<dd><p>alias of <a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#tuple" title="(in Python v3.11)"><code class="xref py py-class docutils literal notranslate"><span class="pre">tuple</span></code></a>[<a class="reference external" href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Hashable" title="(in Python v3.11)"><code class="xref py py-class docutils literal notranslate"><span class="pre">Hashable</span></code></a>]</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="angryowl.grammar.Grammar.production_rules">
<span class="sig-name descname"><span class="pre">production_rules</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#angryowl.grammar.Grammar.production_rules" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>Generator[<a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#tuple" title="(in Python v3.11)">tuple</a>[SymbolsStr, SymbolsStr], None, None]</p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="angryowl.grammar.Grammar.type">
<span class="sig-name descname"><span class="pre">type</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#angryowl.grammar.Grammar.type" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns the type of the grammar object according to the
<a class="reference external" href="https://en.wikipedia.org/wiki/Chomsky_hierarchy">Chomsky hierarchy</a>.</p>
<p>If we determine the type of each production rule in the grammar,
then the type of the grammar will be the least restrictive type among them
(i.e. the minimum number).</p>
<dl class="field-list simple">
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p><a class="reference internal" href="#angryowl.grammar.GrammarType" title="angryowl.grammar.GrammarType"><em>GrammarType</em></a></p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="angryowl.grammar.Grammar.to_normal_form">
<span class="sig-name descname"><span class="pre">to_normal_form</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#angryowl.grammar.Grammar.to_normal_form" title="Permalink to this definition">¶</a></dt>
<dd><p>Convert a context-free grammar to its <a class="reference external" href="https://en.wikipedia.org/wiki/Chomsky_normal_form">Chomsky normal form</a>.</p>
<dl class="field-list simple">
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p><a class="reference internal" href="#angryowl.grammar.Grammar" title="angryowl.grammar.Grammar"><em>Grammar</em></a></p>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="angryowl.grammar.Grammar.is_in_normal_form">
<span class="sig-name descname"><span class="pre">is_in_normal_form</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#angryowl.grammar.Grammar.is_in_normal_form" title="Permalink to this definition">¶</a></dt>
<dd><p>Check if grammar is in <a class="reference external" href="https://en.wikipedia.org/wiki/Chomsky_normal_form">Chomsky normal form</a>.</p>
<dl class="field-list simple">
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p><a class="reference external" href="https://docs.python.org/3/library/functions.html#bool" title="(in Python v3.11)">bool</a></p>
</dd>
</dl>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="angryowl.grammar.GrammarType">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">angryowl.grammar.</span></span><span class="sig-name descname"><span class="pre">GrammarType</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#angryowl.grammar.GrammarType" title="Permalink to this definition">¶</a></dt>
<dd><p>Grammar classes according to the <a class="reference external" href="https://en.wikipedia.org/wiki/Chomsky_hierarchy">Chomsky hierarchy</a>.</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="angryowl.grammar.GrammarType.UNRESTRICTED">
<span class="sig-name descname"><span class="pre">UNRESTRICTED</span></span><em class="property"><span class="w"> </span><span class="p"><span class="pre">=</span></span><span class="w"> </span><span class="pre">0</span></em><a class="headerlink" href="#angryowl.grammar.GrammarType.UNRESTRICTED" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="angryowl.grammar.GrammarType.CONTEXT_SENSITIVE">
<span class="sig-name descname"><span class="pre">CONTEXT_SENSITIVE</span></span><em class="property"><span class="w"> </span><span class="p"><span class="pre">=</span></span><span class="w"> </span><span class="pre">1</span></em><a class="headerlink" href="#angryowl.grammar.GrammarType.CONTEXT_SENSITIVE" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="angryowl.grammar.GrammarType.CONTEXT_FREE">
<span class="sig-name descname"><span class="pre">CONTEXT_FREE</span></span><em class="property"><span class="w"> </span><span class="p"><span class="pre">=</span></span><span class="w"> </span><span class="pre">2</span></em><a class="headerlink" href="#angryowl.grammar.GrammarType.CONTEXT_FREE" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="angryowl.grammar.GrammarType.REGULAR">
<span class="sig-name descname"><span class="pre">REGULAR</span></span><em class="property"><span class="w"> </span><span class="p"><span class="pre">=</span></span><span class="w"> </span><span class="pre">3</span></em><a class="headerlink" href="#angryowl.grammar.GrammarType.REGULAR" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</dd></dl>

</section>
#+end_export
