#+title: Lab5
#+PROPERTY: header-args:python   :session *python_lab5* :exports both :eval no-export :async
#+PROPERTY: header-args:latex   :noweb yes
* Lab 5: Parsing, building an Abstract Syntax Tree
- Course :: Formal Languages & Finite Automata
- Author :: Balan Artiom

* Theory
There are a dozen different parsers with different workings and different capabilities.
The easiest to implement seems to be the so-called [[https://en.wikipedia.org/wiki/Recursive_descent_parser][Recursive descent parser]].
To put it shortly, it is implemented by writing a function for every non-terminal in the grammar
which picks a suitable production from that non-terminal, consumes the tokens
and calls some other such functions when it meets other non-terminals,
then returns a part of the AST corresponding to its non-terminal.
Once we have such functions for every non-terminal,
we simply call the function for the starting symbol (e.g. =program=)
and watch in awe the magic of recursion do its thing..
* Objectives
- [X] Use a TokenType enum
- [X] Use regex in the lexer
- [X] Implement a parser that returns an AST
* Results
#+begin_src python :exports none :results none
import sys
from icecream import ic
from pprint import pprint

sys.path.insert(0, "../src")

try:
    from lexer import *
    from parser import *
except ImportError:
    print('No Import')
#+end_src

The result of my hard work is this parser for a subset of Python (kind of):
#+begin_src python
p = Parser()
#+end_src

#+RESULTS:

Without further ado, let me show it in action. Here's a little program which consists of a single expression:
#+name: text1
#+begin_src python :eval no
a + 10
#+end_src

And here's how I can parse it:
#+begin_src python :results output :var inp=(get-val-of-named-src-block "text1")
tokens = get_tokens(inp)
ast = p.parse(tokens)

pprint(ast)
#+end_src

#+RESULTS:
: Block(statements=[Expression(terms=[Term(op=None,
:                                          factors=[Factor(op=None,
:                                                          value=Variable(name='a'))]),
:                                     Term(op='+',
:                                          factors=[Factor(op=None,
:                                                          value=Number(value=10))])])])

Great, isn't it? Of course it would've been better if I could draw it,
but =pprint()= is good enough, you can still see the tree structure.

Let's see some more examples. Here's a list of assignments with comments:
#+name: text2
#+begin_src python :eval no
# comments and blank lines are ignored

# assignments can have parantheses
a = 10 * (5 + 5 * 2)
b = 1 * 2 / 3 * 4
#+end_src

And here's the AST:
#+begin_src python :results output :var inp=(get-val-of-named-src-block "text2")
tokens = get_tokens(inp)
ast = p.parse(tokens)

pprint(ast)
#+end_src

#+RESULTS:
#+begin_example
Block(statements=[AssignmentStatement(var=Variable(name='a'),
                                      expr=Expression(terms=[Term(op=None,
                                                                  factors=[Factor(op=None,
                                                                                  value=Number(value=10)),
                                                                           Factor(op='*',
                                                                                  value=Expression(terms=[Term(op=None,
                                                                                                               factors=[Factor(op=None,
                                                                                                                               value=Number(value=5))]),
                                                                                                          Term(op='+',
                                                                                                               factors=[Factor(op=None,
                                                                                                                               value=Number(value=5)),
                                                                                                                        Factor(op='*',
                                                                                                                               value=Number(value=2))])]))])])),
                  AssignmentStatement(var=Variable(name='b'),
                                      expr=Expression(terms=[Term(op=None,
                                                                  factors=[Factor(op=None,
                                                                                  value=Number(value=1)),
                                                                           Factor(op='*',
                                                                                  value=Number(value=2)),
                                                                           Factor(op='/',
                                                                                  value=Number(value=3)),
                                                                           Factor(op='*',
                                                                                  value=Number(value=4))])]))])
#+end_example

Notice how the AST consists of a =Block=, which has two =AssignmentStatement=,
which have two fields, =var= and =expr=.
The =Expression= structure is a bit fancy to allow for operator precedence.
Here's the relevant piece of grammar to explain it:
#+begin_example
expression = term (("+"|"-") term)*
term = factor (("*"|"/") factor)*
factor = ID | Number | "(" expression ")"
#+end_example

The last things I haven't showcased yet are conditionals and =while= statements:
#+name: text3
#+begin_src python :eval no
while b == 0:
    if a > b:
        a = a - b
    else:
        b = b - a
#+end_src

#+begin_src python :results output :var inp=(get-val-of-named-src-block "text3")
tokens = get_tokens(inp)
ast = p.parse(tokens)

pprint(ast)
#+end_src

#+RESULTS:
#+begin_example
Block(statements=[WhileStatement(condition=Condition(expr1=Expression(terms=[Term(op=None,
                                                                                  factors=[Factor(op=None,
                                                                                                  value=Variable(name='b'))])]),
                                                     op='==',
                                                     expr2=Expression(terms=[Term(op=None,
                                                                                  factors=[Factor(op=None,
                                                                                                  value=Number(value=0))])])),
                                 block=Block(statements=[ConditionalStatement(condition=Condition(expr1=Expression(terms=[Term(op=None,
                                                                                                                               factors=[Factor(op=None,
                                                                                                                                               value=Variable(name='a'))])]),
                                                                                                  op='>',
                                                                                                  expr2=Expression(terms=[Term(op=None,
                                                                                                                               factors=[Factor(op=None,
                                                                                                                                               value=Variable(name='b'))])])),
                                                                              then_block=Block(statements=[AssignmentStatement(var=Variable(name='a'),
                                                                                                                               expr=Expression(terms=[Term(op=None,
                                                                                                                                                           factors=[Factor(op=None,
                                                                                                                                                                           value=Variable(name='a'))]),
                                                                                                                                                      Term(op='-',
                                                                                                                                                           factors=[Factor(op=None,
                                                                                                                                                                           value=Variable(name='b'))])]))]),
                                                                              else_block=Block(statements=[AssignmentStatement(var=Variable(name='b'),
                                                                                                                               expr=Expression(terms=[Term(op=None,
                                                                                                                                                           factors=[Factor(op=None,
                                                                                                                                                                           value=Variable(name='b'))]),
                                                                                                                                                      Term(op='-',
                                                                                                                                                           factors=[Factor(op=None,
                                                                                                                                                                           value=Variable(name='a'))])]))]))]))])
#+end_example

* Implementation
